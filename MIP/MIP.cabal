cabal-version: 1.18

-- This file has been generated from package.yaml by hpack version 0.37.0.
--
-- see: https://github.com/sol/hpack

name:           MIP
version:        0.2.1.0
synopsis:       Library for using Mixed Integer Programming (MIP)
description:    Please see the README on GitHub at <https://github.com/msakai/haskell-MIP/tree/master/MIP#readme>
category:       Math, Algorithms, Optimisation, Optimization
homepage:       https://github.com/msakai/haskell-MIP#readme
bug-reports:    https://github.com/msakai/haskell-MIP/issues
author:         Masahiro Sakai
maintainer:     masahiro.sakai@gmail.com
copyright:      2020 Masahiro Sakai
license:        BSD3
license-file:   LICENSE
build-type:     Simple
extra-source-files:
    README.md
    ChangeLog.md
    doc-images/MIP-Status-diagram.tex
    samples/mps/example2.mps
    samples/mps/ind1.mps
    samples/mps/intvar1.mps
    samples/mps/intvar2.mps
    samples/mps/quadobj1.mps
    samples/mps/quadobj2.mps
    samples/mps/ranges.mps
    samples/mps/sc.mps
    samples/mps/sos.mps
    samples/mps/test-bounds-bv.mps
    samples/mps/test-bounds-fixed.mps
    samples/mps/test-bounds-free.mps
    samples/mps/test-bounds-mi.mps
    samples/mps/test-bounds-pl.mps
    samples/mps/test-implicit-bv.mps
    samples/mps/test-lazy-constraints.mps
    samples/mps/test-negative-upper-bound.mps
    samples/mps/test-obj-offset.mps
    samples/mps/test-qcp.mps
    samples/mps/test-semicont.mps
    samples/mps/test-semiint-sc.mps
    samples/mps/test-semiint-si.mps
    samples/mps/test-sos2.mps
    samples/mps/test-user-cuts.mps
    samples/lp/empty_obj_1.lp
    samples/lp/empty_obj_2.lp
    samples/lp/glpk-preprocess-bug.lp
    samples/lp/infeasible.lp
    samples/lp/test-bounds-fixed.lp
    samples/lp/test-bounds-free.lp
    samples/lp/test-indicator.lp
    samples/lp/test-lazy-constraints.lp
    samples/lp/test-problem-name.lp
    samples/lp/test-qcp.lp
    samples/lp/test-qcp2.lp
    samples/lp/test-qp.lp
    samples/lp/test-semicont.lp
    samples/lp/test-semiint.lp
    samples/lp/test-sos.lp
    samples/lp/test-sos2.lp
    samples/lp/test-user-cuts.lp
    samples/lp/test.lp
    samples/lp/unbounded-ip.lp
extra-doc-files:
    doc-images/MIP-Status-diagram.png

source-repository head
  type: git
  location: https://github.com/msakai/haskell-MIP

flag TestCBC
  description: run test cases that depend on cbc command
  manual: True
  default: False

flag TestCPLEX
  description: run test cases that depend on cplex command
  manual: True
  default: False

flag TestGlpsol
  description: run test cases that depend on glpsol command
  manual: True
  default: False

flag TestGurobiCl
  description: run test cases that depend on gurobi_cl command
  manual: True
  default: False

flag TestHiGHS
  description: run test cases that depend on highs command
  manual: True
  default: False

flag TestLPSolve
  description: run test cases that depend on lp_solve command
  manual: True
  default: False

flag TestPrintemps
  description: run test cases that depend on mps_solver.exe command of printemps
  manual: True
  default: False

flag TestSCIP
  description: run test cases that depend on scip command
  manual: True
  default: False

flag WithZlib
  description: Use zlib package to support gzipped files
  manual: True
  default: True

library
  exposed-modules:
      Numeric.Optimization.MIP
      Numeric.Optimization.MIP.Base
      Numeric.Optimization.MIP.FileUtils
      Numeric.Optimization.MIP.LPFile
      Numeric.Optimization.MIP.MPSFile
      Numeric.Optimization.MIP.Solution.CBC
      Numeric.Optimization.MIP.Solution.CPLEX
      Numeric.Optimization.MIP.Solution.GLPK
      Numeric.Optimization.MIP.Solution.Gurobi
      Numeric.Optimization.MIP.Solution.HiGHS
      Numeric.Optimization.MIP.Solution.MIPLIB
      Numeric.Optimization.MIP.Solution.Printemps
      Numeric.Optimization.MIP.Solution.SCIP
      Numeric.Optimization.MIP.Solver
      Numeric.Optimization.MIP.Solver.Base
      Numeric.Optimization.MIP.Solver.CBC
      Numeric.Optimization.MIP.Solver.CPLEX
      Numeric.Optimization.MIP.Solver.Glpsol
      Numeric.Optimization.MIP.Solver.GurobiCl
      Numeric.Optimization.MIP.Solver.HiGHS
      Numeric.Optimization.MIP.Solver.LPSolve
      Numeric.Optimization.MIP.Solver.Printemps
      Numeric.Optimization.MIP.Solver.SCIP
  other-modules:
      Paths_MIP
      Numeric.Optimization.MIP.Internal.ProcessUtil
      Numeric.Optimization.MIP.Internal.Util
  hs-source-dirs:
      src
  other-extensions:
      CPP
  build-depends:
      OptDir
    , aeson >=1.4.2.0
    , base >=4.12 && <5
    , containers >=0.5.0
    , data-default-class
    , extended-reals >=0.1 && <1.0
    , filepath
    , hashable >=1.2.7.0 && <1.6.0.0
    , intern >=0.9.1.2 && <1.0.0.0
    , lattices
    , megaparsec >=7 && <10
    , mtl >=2.1.2 && <2.4
    , process >=1.1.0.2
    , scientific
    , stm >=2.3
    , temporary >=1.2
    , text >=1.1.0.0
    , xml-conduit
  default-language: Haskell2010
  if flag(WithZlib)
    cpp-options: -DWITH_ZLIB
    build-depends:
        bytestring
      , bytestring-encoding
      , case-insensitive
      , zlib
  else
    cpp-options:  

test-suite MIP-test
  type: exitcode-stdio-1.0
  main-is: TestSuite.hs
  other-modules:
      IsClose
      Test.LPFile
      Test.MIP
      Test.MIPSolver
      Test.MPSFile
      Paths_MIP
  hs-source-dirs:
      test
  build-depends:
      HUnit
    , MIP
    , base >=4.12 && <5
    , bytestring
    , containers >=0.5.0
    , data-default-class
    , filepath
    , lattices
    , quickcheck-instances >=0.3.19 && <0.4
    , tasty >=0.10.1
    , tasty-hunit >=0.9 && <0.11
    , tasty-quickcheck >=0.8 && <0.12
    , tasty-th
    , temporary
    , text
  default-language: Haskell2010
  if flag(TestCBC)
    cpp-options: -DTEST_CBC
  else
    cpp-options:  
  if flag(TestCPLEX)
    cpp-options: -DTEST_CPLEX
  else
    cpp-options:  
  if flag(TestGlpsol)
    cpp-options: -DTEST_GLPSOL
  else
    cpp-options:  
  if flag(TestGurobiCl)
    cpp-options: -DTEST_GUROBI_CL
  else
    cpp-options:  
  if flag(TestHiGHS)
    cpp-options: -DTEST_HIGHS
  else
    cpp-options:  
  if flag(TestLPSolve)
    cpp-options: -DTEST_LP_SOLVE
  else
    cpp-options:  
  if flag(TestPrintemps)
    cpp-options: -DTEST_PRINTEMPS
  else
    cpp-options:  
  if flag(TestSCIP)
    cpp-options: -DTEST_SCIP
  else
    cpp-options:  
  if flag(WithZlib)
    cpp-options: -DWITH_ZLIB
  else
    cpp-options:  
  if flag(WithZlib)
    cpp-options: -DWITH_ZLIB
    build-depends:
        zlib
  else
    cpp-options:  
