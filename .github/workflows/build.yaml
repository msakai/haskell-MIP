on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

name: build
jobs:
  haskell-MIP:
    name: haskell-MIP
    runs-on: ${{ matrix.os }}
    env:
      STACK_YAML: ${{ matrix.stack_yaml }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - ghc: '9.10.1'
            os: ubuntu-latest
            stack_yaml: 'stack-ghc-9.10.yaml'
            stack_args: ''
            stack_test_args: ''
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestGurobiCl --flag MIP:TestHiGHS'
          - ghc: '9.8.4'
            os: ubuntu-latest
            stack_yaml: 'stack-ghc-9.8.yaml'
            stack_args: ''
            stack_test_args: ''
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestGurobiCl --flag MIP:TestHiGHS'
          - ghc: '9.6.6'
            os: ubuntu-latest
            stack_yaml: 'stack-ghc-9.6.yaml'
            stack_args: '--coverage --haddock --no-haddock-deps'
            stack_test_args: ''
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestGurobiCl --flag MIP:TestHiGHS --flag MIP:TestSCIP'
            coveralls: true
            scip_docker: true
          - ghc: '9.4.8'
            os: ubuntu-latest
            stack_yaml: 'stack-ghc-9.4.yaml'
            stack_args: ''
            stack_test_args: ''
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestGurobiCl --flag MIP:TestHiGHS --flag MIP:-WithZLIB'
          - ghc: '9.2.8'
            os: ubuntu-latest
            stack_yaml: 'stack-ghc-9.2.yaml'
            stack_args: ''
            stack_test_args: ''
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestGurobiCl --flag MIP:TestHiGHS'
          - ghc: '9.0.2'
            os: ubuntu-latest
            stack_yaml: 'stack-ghc-9.0.yaml'
            stack_args: ''
            stack_test_args: ''
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestGurobiCl --flag MIP:TestHiGHS'

          - ghc: '9.6.6'
            os: macos-latest
            stack_yaml: 'stack-ghc-9.6.yaml'
            stack_args: '--extra-include-dirs /opt/homebrew/include --extra-lib-dirs /opt/homebrew/lib'
            stack_test_args: ''
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestHiGHS --flag MIP:TestPrintemps --flag MIP:TestSCIP'
            coveralls: false

          - ghc: '9.6.6'
            os: windows-latest
            stack_yaml: 'stack-ghc-9.6.yaml'
            stack_args: '--arch x86_64'
            stack_test_args: '-j1'  # https://github.com/commercialhaskell/stack/issues/5024
            # Testing of HiGHS sometimes stuck
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestGurobiCl'
            coveralls: false
            windows_32_or_64: '64'
            MINGW_PACKAGE_PREFIX: ''
          - ghc: '8.6.3'
            os: windows-latest
            stack_yaml: 'stack-windows-i386.yaml'
            stack_args: '--arch i386'
            stack_test_args: '-j1'  # https://github.com/commercialhaskell/stack/issues/5024
            flags: '--flag MIP:TestCBC --flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestGurobiCl --flag MIP:TestHiGHS'
            coveralls: false
            windows_32_or_64: '32'
            MINGW_PACKAGE_PREFIX: ''
          - ghc: '9.6.6'
            os: windows-latest
            stack_yaml: 'stack-ghc-9.6.yaml'
            stack_args: '--arch x86_64'
            stack_test_args: '-j1'  # https://github.com/commercialhaskell/stack/issues/5024
            flags: '--flag MIP:TestGlpsol --flag MIP:TestLPSolve --flag MIP:TestHiGHS'
            coveralls: false
            windows_32_or_64: '64'
            MINGW_PACKAGE_PREFIX: 'mingw-w64-x86_64'
          - ghc: '8.6.3'
            os: windows-latest
            stack_yaml: 'stack-windows-i386.yaml'
            stack_args: '--arch i386'
            stack_test_args: '-j1'  # https://github.com/commercialhaskell/stack/issues/5024
            flags: '--flag MIP:TestGlpsol --flag MIP:TestLPSolve'
            coveralls: false
            windows_32_or_64: '32'
            MINGW_PACKAGE_PREFIX: 'mingw-w64-i686'
    steps:
      - uses: actions/checkout@v4

      - uses: haskell-actions/setup@v2
        id: setup-haskell
        name: Setup Haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          enable-stack: true
          stack-version: 'latest'
          stack-no-global: true
          stack-setup-ghc: true

      # setup-conda does not work on macos-13 and later
      # https://github.com/s-weigand/setup-conda/issues/432
      - uses: s-weigand/setup-conda@v1
        name: Setup Conda
        if: contains(matrix.flags, '--flag MIP:TestGurobiCl')
        with:
          python-version: 3.12
          conda-channels: 'http://conda.anaconda.org/gurobi'

      - name: Install Gurobi
        if: contains(matrix.flags, '--flag MIP:TestGurobiCl')
        run: conda install gurobi

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install coinor-cbc glpk-utils libglpk-dev lp-solve

          echo $GITHUB_WORKSPACE >> $GITHUB_PATH
          fname=HiGHSstatic.v1.9.0.x86_64-linux-gnu-cxx11.tar.gz
          curl -o${fname} -L --insecure https://github.com/JuliaBinaryWrappers/HiGHSstatic_jll.jl/releases/download/HiGHSstatic-v1.9.0%2B0/${fname}
          tar zxf ${fname} bin/highs --strip-components 1

      - name: Install packages (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cbc glpk highs lp_solve scip
          brew install msakai/tap/printemps

      - name: Install packages (Windows)
        if: runner.os == 'Windows' && matrix.MINGW_PACKAGE_PREFIX == ''
        shell: bash
        run: |
          echo $GITHUB_WORKSPACE >> $GITHUB_PATH

          curl -oCbc-releases.2.10.12-w64-msvc17-md.zip -L --insecure https://github.com/coin-or/Cbc/releases/download/releases%2F2.10.12/Cbc-releases.2.10.12-w64-msvc17-md.zip
          7z e Cbc-releases.2.10.12-w64-msvc17-md.zip bin/cbc.exe

          curl -owinglpk-4.65.zip -L --insecure https://jaist.dl.sourceforge.net/project/winglpk/winglpk/GLPK-4.65/winglpk-4.65.zip
          7z x winglpk-4.65.zip
          cp glpk-4.65/w${{ matrix.windows_32_or_64 }}/glpk_4_65.lib glpk-4.65/w${{ matrix.windows_32_or_64 }}/glpk.lib
          echo ${GITHUB_WORKSPACE}\\glpk-4.65\\w${{ matrix.windows_32_or_64 }} >> $GITHUB_PATH
          echo GLPK_LIB_DIR=${GITHUB_WORKSPACE}\\glpk-4.65\\w${{ matrix.windows_32_or_64 }} >> $GITHUB_ENV
          echo GLPK_INCLUDE_DIR=${GITHUB_WORKSPACE}\\glpk-4.65\\src >> $GITHUB_ENV

          curl -olp_solve_5.5.2.5_exe_win${{ matrix.windows_32_or_64 }}.zip -L --insecure https://jaist.dl.sourceforge.net/project/lpsolve/lpsolve/5.5.2.5/lp_solve_5.5.2.5_exe_win${{ matrix.windows_32_or_64 }}.zip
          7z x lp_solve_5.5.2.5_exe_win${{ matrix.windows_32_or_64 }}.zip

          if [[ ${{ matrix.windows_32_or_64 }} == "32" ]]; then
              fname=HiGHSstatic.v1.9.0.i686-w64-mingw32.tar.gz
          else
              fname=HiGHSstatic.v1.9.0.x86_64-w64-mingw32.tar.gz
          fi
          curl -o${fname} -L --insecure https://github.com/JuliaBinaryWrappers/HiGHSstatic_jll.jl/releases/download/HiGHSstatic-v1.9.0%2B0/${fname}
          tar zxf ${fname} bin/highs.exe --strip-components 1

      # See https://www.msys2.org/news/#2020-06-29-new-packagers about the msys2-keyring workaround
      - name: Fix msys2-keyring in stack-msys environment
        if: runner.os == 'Windows' && matrix.MINGW_PACKAGE_PREFIX == 'mingw-w64-i686'
        shell: bash
        run: |
          curl -O https://repo.msys2.org/msys/i686/msys2-keyring-1~20210213-2-any.pkg.tar.zst
          curl -O https://repo.msys2.org/msys/i686/pacman-6.0.0-4-i686.pkg.tar.zst
          stack exec ${{ matrix.stack_args }} -- bash -c "
          set -eux
          # cp /etc/pacman.conf /etc/pacman.conf.orig
          sed -i -e 's/^LocalFileSigLevel = .*$/LocalFileSigLevel = Never/' /etc/pacman.conf
          pacman -U --noconfirm msys2-keyring-1~20210213-2-any.pkg.tar.zst pacman-6.0.0-4-i686.pkg.tar.zst
          # mv /etc/pacman.conf.orig /etc/pacman.conf
          "

      - name: Install packages (MINGW)
        if: runner.os == 'Windows' && matrix.MINGW_PACKAGE_PREFIX != ''
        shell: bash
        run: |
          stack exec ${{ matrix.stack_args }} -- pacman -Sy --noconfirm
          stack exec ${{ matrix.stack_args }} -- pacman -S --needed --noconfirm ${{ matrix.MINGW_PACKAGE_PREFIX }}-glpk ${{ matrix.MINGW_PACKAGE_PREFIX }}-lpsolve
          if [[ ${{ matrix.MINGW_PACKAGE_PREFIX }} != 'mingw-w64-i686' ]]; then
            stack exec ${{ matrix.stack_args }} -- pacman -S --needed --noconfirm ${{ matrix.MINGW_PACKAGE_PREFIX }}-highs
          fi
      - name: Setup SCIP Docker image
        if: matrix.scip_docker
        run: |
          docker image pull scipoptsuite/scipoptsuite:7.0.2
          echo "${GITHUB_WORKSPACE}/misc/scip_docker_wrapper" >> $GITHUB_PATH

      - uses: actions/cache@v4
        name: Cache ~/.stack
        with:
          path: ${{ steps.setup-haskell.outputs.stack-root }}
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('*/*.cabal') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-

      # https://github.com/commercialhaskell/stack/issues/5405
      - name: Clear setup-exe-cache directory
        if: runner.os == 'macOS'
        continue-on-error: true
        run: rm -r ~/.stack/setup-exe-cache

      - name: Build
        shell: bash
        run: stack build --test --no-run-tests --bench --no-run-benchmarks ${{ matrix.stack_args }} ${{ matrix.flags }} --extra-include-dirs=$GLPK_INCLUDE_DIR --extra-lib-dirs=$GLPK_LIB_DIR

      - name: Test
        shell: bash
        run: stack test ${{ matrix.stack_args }} ${{ matrix.stack_test_args }} ${{ matrix.flags }} --extra-include-dirs=$GLPK_INCLUDE_DIR --extra-lib-dirs=$GLPK_LIB_DIR

      - name: Coveralls
        if: matrix.coveralls
        continue-on-error: true
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          curl -L https://github.com/lehins/stack-hpc-coveralls/releases/download/v0.0.6.0/shc.tar.gz | tar -xz
          ./shc --repo-token="$COVERALLS_REPO_TOKEN" combined all
